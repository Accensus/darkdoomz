version "3.3"

//Looked to Fancy World by Kinsie for how to do this
//Code template by Gutawer
/*Class SectorLightAdjust : EventHandler {
	override void WorldLoaded(WorldEvent e) {
		for (int i = 0; i < level.Sectors.Size(); i++) {
			level.Sectors[i].lightlevel /= CVar.GetCVar('darken_factor').GetInt();
		}
		for (int i = 0; i < level.Sides.Size(); i++) {
			level.Sides[i].light /= CVar.GetCVar('darken_factor').GetInt();
		}
	}
}*/

//Courtesy FishyClockwork, with modifications by Caligari87
class DarkDoomZ_SectorLightAdjust : EventHandler {
	Array<int> BaseLightLevels;
	int Mode,Preset,Custom,SkyMode;
	int OldMode,OldPreset,OldCustom,OldSkyMode;
	int BaseAdjustment, FinalAdjustment;
	bool IsSky;

	override void WorldLoaded(WorldEvent e) {
		BaseLightLevels.Clear();
		for(int i = 0; i < Level.Sectors.Size(); i++) {
			BaseLightlevels.Push(Level.Sectors[i].LightLevel);
		}
		ChangeLighting();
	}

	override void UiTick() {
		EventHandler.SendNetworkEvent("UpdateLights");
	}

	override void NetworkProcess(ConsoleEvent e) {
		if(e.Name == "UpdateLights") ChangeLighting();
	}

	void ChangeLighting() {
		Mode = CVar.GetCvar("ddz_mode").GetInt();
		Preset = CVar.GetCvar("ddz_preset").GetInt();
		Custom = CVar.GetCvar("ddz_custom").GetInt();
		SkyMode = CVar.GetCvar("ddz_skymode").GetInt();

		if(OldMode != Mode ||
		   OldPreset != Preset ||
		   OldCustom != Custom ||
		   OldSkyMode != Skymode) {

			BaseAdjustment = clamp((32*Preset)-Custom,0,256);
			for(int i = 0; i < BaseLightLevels.Size(); i++) {
				IsSky = (level.Sectors[i].GetTexture(0) == skyflatnum ||
						 level.Sectors[i].GetTexture(1) == skyflatnum);

				FinalAdjustment = BaseAdjustment;
				if(IsSky) FinalAdjustment *= (0.5 * SkyMode);

				switch(Mode) {
					case 1: //subtract raw light level (simple fade)
						Level.Sectors[i].Lightlevel = BaseLightLevels[i] - FinalAdjustment;
						break;
					case 2: //linear compression
						Level.Sectors[i].Lightlevel = BaseLightLevels[i] * (1.0-FinalAdjustment/256.0);
						break;
					case 3: //clamp max brightness level
						Level.Sectors[i].Lightlevel = clamp(BaseLightLevels[i],0,256-FinalAdjustment);
						break;
					default: //disable
						Level.Sectors[i].Lightlevel = BaseLightLevels[i]; //reset lightlevels
						break;
				}
			}
		}
		OldMode = Mode;
		OldPreset = Preset;
		OldCustom = Custom;
		OldSkyMode = SkyMode;
	}
}

class DarkDoomZ_Flashlight : CustomInventory {
	DarkDoomZ_Spotlight SelfLight1, SelfLight2, SelfLight3;
	default {
		+INVENTORY.AUTOACTIVATE;
	}

	override void DoEffect() {
		super.DoEffect();
		if(!SelfLight1) {
			SelfLight1 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",(0,0,0),false));
			SelfLight1.FollowTarget = owner;
			SelfLight1.args[0] = 224; //R
			SelfLight1.args[1] = 236; //G
			SelfLight1.args[2] = 255; //B
			SelfLight1.args[3] = 768; //Radius
			SelfLight1.SpotInnerAngle = 5;
			SelfLight1.SpotOuterAngle = 10;
		}
		if(!SelfLight2) {
			SelfLight2 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",(0,0,0),false));
			SelfLight2.FollowTarget = owner;
			SelfLight2.args[0] = 224; //R
			SelfLight2.args[1] = 236; //G
			SelfLight2.args[2] = 255; //B
			SelfLight2.args[3] = 384; //Radius
			SelfLight2.SpotInnerAngle = 10;
			SelfLight2.SpotOuterAngle = 25;
		}
		if(!SelfLight3) {
			SelfLight3 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",(0,0,0),false));
			SelfLight3.FollowTarget = owner;
			SelfLight3.args[0] = 224; //R
			SelfLight3.args[1] = 236; //G
			SelfLight3.args[2] = 255; //B
			SelfLight3.args[3] = 192; //Radius
			SelfLight3.SpotInnerAngle = 25;
			SelfLight3.SpotOuterAngle = 60;
		}
	}

	States {
	Spawn:
		TNT1 A -1;
		stop;
	Use:
		TNT1 A 1;
		loop;
	}
}

class DarkDoomZ_Spotlight : DynamicLight {
	actor FollowTarget;
	double vela, velp;

	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}
	override void Tick() {
		super.Tick();
		if(followTarget) {
			vel.x += DampedSpring(pos.x, followTarget.pos.x,    vel.x, 0.75, 0.9);
			vel.y += DampedSpring(pos.y, followTarget.pos.y,    vel.y, 0.75, 0.9);
			vel.z += DampedSpring(pos.z, followTarget.pos.z+32, vel.z, 0.75, 0.9);
			vela  += DampedSpring(angle, followTarget.angle,    vela,  0.25, 0.9);
			velp  += DampedSpring(pitch, followTarget.pitch,    velp,  0.25, 0.9);
			setOrigin(pos + vel, true);
			A_SetAngle(angle + vela, true);
			A_SetPitch(pitch + velp, true);
		}
	}

	double DampedSpring(double p, double r, double v, double k, double d) {
		return -(d * v) - (k * (p - r));
	}
}