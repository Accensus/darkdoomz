version "3.3"

//Looked to Fancy World by Kinsie for how to do this
//Code template by Gutawer
/*Class SectorLightAdjust : EventHandler {
	override void WorldLoaded(WorldEvent e) {
		for (int i = 0; i < level.Sectors.Size(); i++) {
			level.Sectors[i].lightlevel /= CVar.GetCVar('darken_factor').GetInt();
		}
		for (int i = 0; i < level.Sides.Size(); i++) {
			level.Sides[i].light /= CVar.GetCVar('darken_factor').GetInt();
		}
	}
}*/

//Courtesy FishyClockwork, with modifications by Caligari87
class DarkDoomZ_SectorLightAdjust : EventHandler {
	Array<int> BaseLightLevels;
	int Mode,Preset,Custom,SkyMode;
	int OldMode,OldPreset,OldCustom,OldSkyMode;
	int BaseAdjustment, FinalAdjustment;
	bool IsSky;

	override void WorldLoaded(WorldEvent e) {
		ThinkerIterator it = ThinkerIterator.Create ("Lighting");
		Lighting effect;
		while (effect = Lighting (it.Next ())) { effect.Destroy (); }

		BaseLightLevels.Clear();
		for(int i = 0; i < Level.Sectors.Size(); i++) {
			BaseLightlevels.Push(Level.Sectors[i].LightLevel);
		}

		ChangeLighting();
	}

	override void PlayerEntered(PlayerEvent e) {
		PlayerInfo player = players[e.PlayerNumber];
		player.mo.giveinventory("DarkDoomZ_Flashlight", 1);
	}

	override void UiTick() {
		EventHandler.SendNetworkEvent("UpdateLights");
	}

	override void NetworkProcess(ConsoleEvent e) {
		if(e.Name == "UpdateLights") ChangeLighting();
	}

	void ChangeLighting() {
		Mode = CVar.GetCvar("ddz_mode").GetInt();
		Preset = CVar.GetCvar("ddz_preset").GetInt();
		Custom = CVar.GetCvar("ddz_custom").GetInt();
		SkyMode = CVar.GetCvar("ddz_skymode").GetInt();

		if(OldMode != Mode ||
		   OldPreset != Preset ||
		   OldCustom != Custom ||
		   OldSkyMode != Skymode) {

			BaseAdjustment = clamp((32*Preset)-Custom,0,256);
			for(int i = 0; i < BaseLightLevels.Size(); i++) {
				IsSky = (level.Sectors[i].GetTexture(0) == skyflatnum ||
						 level.Sectors[i].GetTexture(1) == skyflatnum);

				FinalAdjustment = BaseAdjustment;
				if(IsSky) FinalAdjustment *= (0.5 * SkyMode);

				switch(Mode) {
					case 1: //subtract raw light level (simple fade)
						Level.Sectors[i].Lightlevel = BaseLightLevels[i] - FinalAdjustment;
						break;
					case 2: //linear compression
						Level.Sectors[i].Lightlevel = BaseLightLevels[i] * (1.0-FinalAdjustment/256.0);
						break;
					case 3: //clamp max brightness level
						Level.Sectors[i].Lightlevel = clamp(BaseLightLevels[i],0,256-FinalAdjustment);
						break;
					default: //disable
						Level.Sectors[i].Lightlevel = BaseLightLevels[i]; //reset lightlevels
						break;
				}
			}
		}
		OldMode = Mode;
		OldPreset = Preset;
		OldCustom = Custom;
		OldSkyMode = SkyMode;
	}
}

class DarkDoomZ_Flashlight : CustomInventory {
	DarkDoomZ_Spotlight SelfLight1, SelfLight2;
	bool Active;
	int Quality,OldQuality;

	default {
		//+INVENTORY.AUTOACTIVATE;
	}

	override void DoEffect() {
		super.DoEffect();
		Quality = CVar.GetCvar("ddz_fl_quality").GetInt();
		if(Active) {
			if(Quality != OldQuality) {
				if(SelfLight1) { SelfLight1.Destroy(); }
				if(SelfLight2) { SelfLight2.Destroy(); }
			}
			switch(Quality) {
				case 0:
					if(!SelfLight1) {
						SelfLight1 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",owner.pos,false));
						SelfLight1.FollowTarget = owner;
						SelfLight1.args[0] = 255; //R
						SelfLight1.args[1] = 241; //G
						SelfLight1.args[2] = 224; //B
						SelfLight1.args[3] = 448; //Radius
						SelfLight1.SpotInnerAngle = 10;
						SelfLight1.SpotOuterAngle = 30;
						SelfLight1.angle = owner.angle;
						SelfLight1.pitch = owner.pitch;
					}
					break;
				case 1:
					if(!SelfLight1) {
						SelfLight1 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",owner.pos,false));
						SelfLight1.FollowTarget = owner;
						SelfLight1.args[0] = 255; //R
						SelfLight1.args[1] = 241; //G
						SelfLight1.args[2] = 224; //B
						SelfLight1.args[3] = 640; //Radius
						SelfLight1.SpotInnerAngle = 8;
						SelfLight1.SpotOuterAngle = 12;
						SelfLight1.angle = owner.angle;
						SelfLight1.pitch = owner.pitch;
					}
					if(!SelfLight2) {
						SelfLight2 = DarkDoomZ_Spotlight(Spawn("DarkDoomZ_Spotlight",owner.pos,false));
						SelfLight2.FollowTarget = owner;
						SelfLight2.args[0] = 191; //R
						SelfLight2.args[1] = 181; //G
						SelfLight2.args[2] = 168; //B
						SelfLight2.args[3] = 384; //Radius
						SelfLight2.SpotInnerAngle = 12;
						SelfLight2.SpotOuterAngle = 48;
						SelfLight2.angle = owner.angle;
						SelfLight2.pitch = owner.pitch;
					}
					break;
			}
		}
		else {
			if(SelfLight1) { SelfLight1.Destroy(); }
			if(SelfLight2) { SelfLight2.Destroy(); }
		}
		OldQuality = Quality;
	}

	States {
	Spawn:
		ROCK A -1;
		stop;
	Use:
		TNT1 A 1 ToggleActive();
		loop;
	}

	action void ToggleActive() {
		if(invoker.Active) { invoker.Active = false; }
		else { invoker.Active = true; }
	}
}

class DarkDoomZ_Spotlight : DynamicLight {
	actor FollowTarget;
	double vela, velp;

	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}
	override void Tick() {
		super.Tick();
		if(followTarget) {
			vel.x += DampedSpring(pos.x, followTarget.pos.x,    vel.x, 0.75, 0.9);
			vel.y += DampedSpring(pos.y, followTarget.pos.y,    vel.y, 0.75, 0.9);
			vel.z += DampedSpring(pos.z, followTarget.pos.z+32*followtarget.player.crouchfactor, vel.z, 0.75, 0.9);
			vela  += DampedSpring(angle, followTarget.angle, vela, 0.25, 0.25);
			velp  += DampedSpring(pitch, followTarget.pitch, velp, 0.25, 0.25);
			setOrigin(pos + vel, true);
			A_SetAngle(angle + (vela/4), true);
			A_SetPitch(pitch + (velp/4), true);
		}
	}

	double DampedSpring(double p, double r, double v, double k, double d) {
		return -(d * v) - (k * (p - r));
	}
}